service: tsa-chp02

frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs14.x
  apiGateway:
    apiKeys:
      - defaultKey

custom:
  apiGatewayServiceProxies:
    - dynamodb:
        path: /restaurants/{id} # no auth
        method: get
        tableName: !Ref RestaurantsTable
        hashKey:
          pathParam: id
          attributeType: S
        action: GetItem
        response:
          template:
            # this is only necessary because we need to override the default
            # behaviour for 404, by default, the response template the plugin
            # generates would return 200 with null when the item is not found
            success: |-
              #set($item = $input.path('$.Item'))
              #if($item != "")
                {

                #foreach($key in $item.keySet())
                  #set ($value = $item.get($key))
                  #foreach($type in $value.keySet())

                  "$key": "$value.get($type)"#if($foreach.hasNext()),#end
                  #end

                  #if($foreach.hasNext()),#end
                #end
                }
              #else
                #set($context.responseOverride.status = 404)
                {
                  "message": "Restaurant was not found"
                }
              #end

  export-env:
    overwrite: true

  exportOutputs:
    include:
      - AwsRegion
      - ApiUrl
      - CognitoUserPoolId
      - CognitoWebClientId
      - DefaultApiKeyId
    output:
      file: ./.env-outputs

functions:
  add-restaurant:
    handler: functions/add-restaurant.handler
    environment:
      RESTAURANTS_TABLE_NAME: !Ref RestaurantsTable
    events:
      - http:
          path: /restaurants
          method: post
          authorizer: aws_iam
          request:
            schemas:
              application/json: ${file(schemas/add-restaurant.json)}
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:PutItem
        Resource: !GetAtt RestaurantsTable.Arn

  search-restaurants:
    handler: functions/search-restaurants.handler
    environment:
      RESTAURANTS_TABLE_NAME: !Ref RestaurantsTable
    events:
      - http:
          path: /search
          method: post
          private: true # use API key
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:Scan
        Resource: !GetAtt RestaurantsTable.Arn

  list-restaurants:
    handler: functions/list-restaurants.handler
    environment:
      RESTAURANTS_TABLE_NAME: !Ref RestaurantsTable
    events:
      - http:
          path: /restaurants
          method: get
          authorizer:
            name: CognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn: !GetAtt CognitoUserPool.Arn
          request:
            parameters:
              querystrings:
                count: false
                nextToken: false
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:Scan
        Resource: !GetAtt RestaurantsTable.Arn

resources:
  Resources:
    RestaurantsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S

    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        AutoVerifiedAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: false
            RequireNumbers: false
            RequireUppercase: false
            RequireSymbols: false
        UsernameAttributes:
          - email

    WebUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        UserPoolId: !Ref CognitoUserPool
        ClientName: web
        ExplicitAuthFlows:
          - ALLOW_USER_SRP_AUTH
          - ALLOW_USER_PASSWORD_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        PreventUserExistenceErrors: ENABLED

  Outputs:
    AwsRegion:
      Value: ${aws:region}

    ApiUrl:
      Value: !Sub https://${ApiGatewayRestApi}.execute-api.${aws:region}.amazonaws.com/${sls:stage}

    CognitoUserPoolId:
      Value: !Ref CognitoUserPool

    CognitoWebClientId:
      Value: !Ref WebUserPoolClient

    DefaultApiKeyId:
      Value: !Ref ApiGatewayApiKey1

plugins:
  - serverless-apigateway-service-proxy
  - serverless-iam-roles-per-function
  - serverless-export-env
  - serverless-export-outputs
